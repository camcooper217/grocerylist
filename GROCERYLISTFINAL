import { useState } from 'react';
import { Plus, Trash2, ShoppingCart, Edit3, Check, X } from 'lucide-react';

const GroceryListApp = () => {
  const [meals, setMeals] = useState([]);
  const [currentView, setCurrentView] = useState('meals'); // 'meals' or 'grocery'
  const [editingMeal, setEditingMeal] = useState(null);
  const [selectedMeals, setSelectedMeals] = useState([]);
  const [groceryList, setGroceryList] = useState([]);

  const storeTypes = ['Produce', 'Meat', 'Dairy', 'Pantry', 'Frozen', 'Bakery', 'Deli'];

  const [newMeal, setNewMeal] = useState({
    name: '',
    ingredients: [{ ingredient: '', quantity: '', unit: '', type: 'Produce' }]
  });

  const addIngredientToMeal = () => {
    setNewMeal(prev => ({
      ...prev,
      ingredients: [...prev.ingredients, { ingredient: '', quantity: '', unit: '', type: 'Produce' }]
    }));
  };

  const updateIngredient = (index, field, value) => {
    setNewMeal(prev => ({
      ...prev,
      ingredients: prev.ingredients.map((ing, i) => 
        i === index ? { ...ing, [field]: value } : ing
      )
    }));
  };

  const removeIngredient = (index) => {
    setNewMeal(prev => ({
      ...prev,
      ingredients: prev.ingredients.filter((_, i) => i !== index)
    }));
  };

  const saveMeal = () => {
    if (!newMeal.name.trim()) return;
    
    const validIngredients = newMeal.ingredients.filter(ing => 
      ing.ingredient.trim() && ing.quantity && ing.unit.trim()
    );
    
    if (validIngredients.length === 0) return;

    const mealToSave = {
      ...newMeal,
      ingredients: validIngredients,
      id: editingMeal ? editingMeal.id : Date.now()
    };

    if (editingMeal) {
      setMeals(prev => prev.map(meal => meal.id === editingMeal.id ? mealToSave : meal));
      setEditingMeal(null);
    } else {
      setMeals(prev => [...prev, mealToSave]);
    }

    setNewMeal({
      name: '',
      ingredients: [{ ingredient: '', quantity: '', unit: '', type: 'Produce' }]
    });
  };

  const deleteMeal = (id) => {
    setMeals(prev => prev.filter(meal => meal.id !== id));
    setSelectedMeals(prev => prev.filter(mealId => mealId !== id));
  };

  const editMeal = (meal) => {
    setEditingMeal(meal);
    setNewMeal({
      name: meal.name,
      ingredients: [...meal.ingredients]
    });
  };

  const cancelEdit = () => {
    setEditingMeal(null);
    setNewMeal({
      name: '',
      ingredients: [{ ingredient: '', quantity: '', unit: '', type: 'Produce' }]
    });
  };

  const toggleMealSelection = (mealId) => {
    setSelectedMeals(prev => 
      prev.includes(mealId) 
        ? prev.filter(id => id !== mealId)
        : [...prev, mealId]
    );
  };

  const generateGroceryList = () => {
    const ingredientMap = new Map();
    
    selectedMeals.forEach(mealId => {
      const meal = meals.find(m => m.id === mealId);
      if (meal) {
        meal.ingredients.forEach(ing => {
          const key = `${ing.ingredient.toLowerCase()}_${ing.unit.toLowerCase()}`;
          if (ingredientMap.has(key)) {
            const existing = ingredientMap.get(key);
            ingredientMap.set(key, {
              ...existing,
              quantity: parseFloat(existing.quantity) + parseFloat(ing.quantity),
              checked: false
            });
          } else {
            ingredientMap.set(key, {
              ingredient: ing.ingredient,
              quantity: parseFloat(ing.quantity),
              unit: ing.unit,
              type: ing.type,
              checked: false
            });
          }
        });
      }
    });

    const consolidatedList = Array.from(ingredientMap.values());
    const sortedList = consolidatedList.sort((a, b) => {
      const typeOrder = storeTypes.indexOf(a.type) - storeTypes.indexOf(b.type);
      if (typeOrder !== 0) return typeOrder;
      return a.ingredient.localeCompare(b.ingredient);
    });

    setGroceryList(sortedList);
    setCurrentView('grocery');
  };

  const toggleItemCheck = (index) => {
    setGroceryList(prev => prev.map((item, i) => 
      i === index ? { ...item, checked: !item.checked } : item
    ));
  };

  const updateGroceryQuantity = (index, newQuantity) => {
    setGroceryList(prev => prev.map((item, i) => 
      i === index ? { ...item, quantity: parseFloat(newQuantity) || 0 } : item
    ));
  };

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-gray-800">Grocery List Manager</h1>
          <div className="flex gap-2">
            <button
              onClick={() => setCurrentView('meals')}
              className={`px-4 py-2 rounded-lg font-medium ${
                currentView === 'meals' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Meal Management
            </button>
            <button
              onClick={() => setCurrentView('grocery')}
              className={`px-4 py-2 rounded-lg font-medium ${
                currentView === 'grocery' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Grocery List
            </button>
          </div>
        </div>

        {currentView === 'meals' && (
          <div className="space-y-8">
            {/* Add/Edit Meal Form */}
            <div className="bg-gray-50 p-6 rounded-lg">
              <h2 className="text-xl font-semibold mb-4">
                {editingMeal ? 'Edit Meal' : 'Add New Meal'}
              </h2>
              
              <div className="mb-4">
                <input
                  type="text"
                  placeholder="Meal name"
                  value={newMeal.name}
                  onChange={(e) => setNewMeal(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="space-y-3">
                <h3 className="font-medium text-gray-700">Ingredients:</h3>
                {newMeal.ingredients.map((ingredient, index) => (
                  <div key={index} className="grid grid-cols-12 gap-2 items-center">
                    <input
                      type="text"
                      placeholder="Ingredient"
                      value={ingredient.ingredient}
                      onChange={(e) => updateIngredient(index, 'ingredient', e.target.value)}
                      className="col-span-4 p-2 border rounded focus:ring-2 focus:ring-blue-500"
                    />
                    <input
                      type="number"
                      placeholder="Qty"
                      value={ingredient.quantity}
                      onChange={(e) => updateIngredient(index, 'quantity', e.target.value)}
                      className="col-span-2 p-2 border rounded focus:ring-2 focus:ring-blue-500"
                    />
                    <input
                      type="text"
                      placeholder="Unit"
                      value={ingredient.unit}
                      onChange={(e) => updateIngredient(index, 'unit', e.target.value)}
                      className="col-span-2 p-2 border rounded focus:ring-2 focus:ring-blue-500"
                    />
                    <select
                      value={ingredient.type}
                      onChange={(e) => updateIngredient(index, 'type', e.target.value)}
                      className="col-span-3 p-2 border rounded focus:ring-2 focus:ring-blue-500"
                    >
                      {storeTypes.map(type => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </select>
                    <button
                      onClick={() => removeIngredient(index)}
                      className="col-span-1 p-2 text-red-500 hover:bg-red-50 rounded"
                    >
                      <Trash2 size={16} />
                    </button>
                  </div>
                ))}
              </div>

              <div className="flex gap-2 mt-4">
                <button
                  onClick={addIngredientToMeal}
                  className="flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"
                >
                  <Plus size={16} />
                  Add Ingredient
                </button>
                <button
                  onClick={saveMeal}
                  className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                >
                  <Check size={16} />
                  {editingMeal ? 'Update Meal' : 'Save Meal'}
                </button>
                {editingMeal && (
                  <button
                    onClick={cancelEdit}
                    className="flex items-center gap-2 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                  >
                    <X size={16} />
                    Cancel
                  </button>
                )}
              </div>
            </div>

            {/* Saved Meals */}
            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">Saved Meals</h2>
                {selectedMeals.length > 0 && (
                  <button
                    onClick={generateGroceryList}
                    className="flex items-center gap-2 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600"
                  >
                    <ShoppingCart size={16} />
                    Generate Grocery List ({selectedMeals.length} meals)
                  </button>
                )}
              </div>

              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {meals.map(meal => (
                  <div key={meal.id} className="border rounded-lg p-4 bg-white">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          checked={selectedMeals.includes(meal.id)}
                          onChange={() => toggleMealSelection(meal.id)}
                          className="w-4 h-4 text-blue-600"
                        />
                        <h3 className="font-semibold">{meal.name}</h3>
                      </div>
                      <div className="flex gap-1">
                        <button
                          onClick={() => editMeal(meal)}
                          className="p-1 text-gray-500 hover:text-blue-500"
                        >
                          <Edit3 size={14} />
                        </button>
                        <button
                          onClick={() => deleteMeal(meal.id)}
                          className="p-1 text-gray-500 hover:text-red-500"
                        >
                          <Trash2 size={14} />
                        </button>
                      </div>
                    </div>
                    <div className="space-y-1 text-sm text-gray-600">
                      {meal.ingredients.map((ing, idx) => (
                        <div key={idx}>
                          {ing.quantity} {ing.unit} {ing.ingredient} ({ing.type})
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>

              {meals.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  No meals saved yet. Add your first meal above!
                </div>
              )}
            </div>
          </div>
        )}

        {currentView === 'grocery' && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold">Grocery List</h2>
              {groceryList.length > 0 && (
                <div className="text-sm text-gray-600">
                  {groceryList.filter(item => item.checked).length} of {groceryList.length} items checked
                </div>
              )}
            </div>

            {groceryList.length > 0 ? (
              <div className="space-y-4">
                {storeTypes.map(type => {
                  const itemsInSection = groceryList.filter(item => item.type === type);
                  if (itemsInSection.length === 0) return null;

                  return (
                    <div key={type} className="bg-white border rounded-lg p-4">
                      <h3 className="font-semibold text-lg mb-3 text-blue-600 border-b pb-2">
                        {type}
                      </h3>
                      <div className="space-y-2">
                        {itemsInSection.map((item, index) => {
                          const globalIndex = groceryList.indexOf(item);
                          return (
                            <div key={globalIndex} 
                                 className={`flex items-center gap-3 p-2 rounded ${
                                   item.checked ? 'bg-green-50 text-green-700' : 'hover:bg-gray-50'
                                 }`}>
                              <input
                                type="checkbox"
                                checked={item.checked}
                                onChange={() => toggleItemCheck(globalIndex)}
                                className="w-4 h-4 text-green-600"
                              />
                              <div className={`flex-1 ${item.checked ? 'line-through' : ''}`}>
                                <span className="font-medium">{item.ingredient}</span>
                              </div>
                              <div className="flex items-center gap-2">
                                <input
                                  type="number"
                                  value={item.quantity}
                                  onChange={(e) => updateGroceryQuantity(globalIndex, e.target.value)}
                                  className="w-16 p-1 border rounded text-center"
                                  step="0.1"
                                />
                                <span className="text-sm text-gray-600">{item.unit}</span>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <ShoppingCart size={48} className="mx-auto mb-4 text-gray-300" />
                <p>No grocery list generated yet.</p>
                <p className="text-sm">Go to Meal Management, select meals, and click "Generate Grocery List".</p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default GroceryListApp;
